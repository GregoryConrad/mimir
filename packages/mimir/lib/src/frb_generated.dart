// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.8.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.8.0';

  @override
  int get rustContentHash => 1727542745;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'embedded_milli',
    ioDirectory: 'native/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<void> crateApiAddDocuments(
      {required String instanceDir,
      required String indexName,
      required List<String> documents});

  Future<void> crateApiDeleteAllDocuments(
      {required String instanceDir, required String indexName});

  Future<void> crateApiDeleteDocuments(
      {required String instanceDir,
      required String indexName,
      required List<String> documentIds});

  Future<void> crateApiEnsureIndexInitialized(
      {required String instanceDir, required String indexName});

  Future<void> crateApiEnsureInstanceInitialized(
      {required String instanceDir, String? tmpDir});

  Future<List<String>> crateApiGetAllDocuments(
      {required String instanceDir, required String indexName});

  Future<String?> crateApiGetDocument(
      {required String instanceDir,
      required String indexName,
      required String documentId});

  Future<MimirIndexSettings> crateApiGetSettings(
      {required String instanceDir, required String indexName});

  Future<BigInt> crateApiNumberOfDocuments(
      {required String instanceDir, required String indexName});

  Future<List<String>> crateApiSearchDocuments(
      {required String instanceDir,
      required String indexName,
      String? query,
      int? limit,
      int? offset,
      List<SortBy>? sortCriteria,
      Filter? filter,
      TermsMatchingStrategy? matchingStrategy});

  Future<void> crateApiSetDocuments(
      {required String instanceDir,
      required String indexName,
      required List<String> documents});

  Future<void> crateApiSetSettings(
      {required String instanceDir,
      required String indexName,
      required MimirIndexSettings settings});
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<void> crateApiAddDocuments(
      {required String instanceDir,
      required String indexName,
      required List<String> documents}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_String(instanceDir);
        var arg1 = cst_encode_String(indexName);
        var arg2 = cst_encode_list_String(documents);
        return wire.wire__crate__api__add_documents(port_, arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiAddDocumentsConstMeta,
      argValues: [instanceDir, indexName, documents],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAddDocumentsConstMeta => const TaskConstMeta(
        debugName: "add_documents",
        argNames: ["instanceDir", "indexName", "documents"],
      );

  @override
  Future<void> crateApiDeleteAllDocuments(
      {required String instanceDir, required String indexName}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_String(instanceDir);
        var arg1 = cst_encode_String(indexName);
        return wire.wire__crate__api__delete_all_documents(port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiDeleteAllDocumentsConstMeta,
      argValues: [instanceDir, indexName],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDeleteAllDocumentsConstMeta => const TaskConstMeta(
        debugName: "delete_all_documents",
        argNames: ["instanceDir", "indexName"],
      );

  @override
  Future<void> crateApiDeleteDocuments(
      {required String instanceDir,
      required String indexName,
      required List<String> documentIds}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_String(instanceDir);
        var arg1 = cst_encode_String(indexName);
        var arg2 = cst_encode_list_String(documentIds);
        return wire.wire__crate__api__delete_documents(port_, arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiDeleteDocumentsConstMeta,
      argValues: [instanceDir, indexName, documentIds],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDeleteDocumentsConstMeta => const TaskConstMeta(
        debugName: "delete_documents",
        argNames: ["instanceDir", "indexName", "documentIds"],
      );

  @override
  Future<void> crateApiEnsureIndexInitialized(
      {required String instanceDir, required String indexName}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_String(instanceDir);
        var arg1 = cst_encode_String(indexName);
        return wire.wire__crate__api__ensure_index_initialized(
            port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiEnsureIndexInitializedConstMeta,
      argValues: [instanceDir, indexName],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiEnsureIndexInitializedConstMeta =>
      const TaskConstMeta(
        debugName: "ensure_index_initialized",
        argNames: ["instanceDir", "indexName"],
      );

  @override
  Future<void> crateApiEnsureInstanceInitialized(
      {required String instanceDir, String? tmpDir}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_String(instanceDir);
        var arg1 = cst_encode_opt_String(tmpDir);
        return wire.wire__crate__api__ensure_instance_initialized(
            port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiEnsureInstanceInitializedConstMeta,
      argValues: [instanceDir, tmpDir],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiEnsureInstanceInitializedConstMeta =>
      const TaskConstMeta(
        debugName: "ensure_instance_initialized",
        argNames: ["instanceDir", "tmpDir"],
      );

  @override
  Future<List<String>> crateApiGetAllDocuments(
      {required String instanceDir, required String indexName}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_String(instanceDir);
        var arg1 = cst_encode_String(indexName);
        return wire.wire__crate__api__get_all_documents(port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_list_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiGetAllDocumentsConstMeta,
      argValues: [instanceDir, indexName],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiGetAllDocumentsConstMeta => const TaskConstMeta(
        debugName: "get_all_documents",
        argNames: ["instanceDir", "indexName"],
      );

  @override
  Future<String?> crateApiGetDocument(
      {required String instanceDir,
      required String indexName,
      required String documentId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_String(instanceDir);
        var arg1 = cst_encode_String(indexName);
        var arg2 = cst_encode_String(documentId);
        return wire.wire__crate__api__get_document(port_, arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_opt_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiGetDocumentConstMeta,
      argValues: [instanceDir, indexName, documentId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiGetDocumentConstMeta => const TaskConstMeta(
        debugName: "get_document",
        argNames: ["instanceDir", "indexName", "documentId"],
      );

  @override
  Future<MimirIndexSettings> crateApiGetSettings(
      {required String instanceDir, required String indexName}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_String(instanceDir);
        var arg1 = cst_encode_String(indexName);
        return wire.wire__crate__api__get_settings(port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_mimir_index_settings,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiGetSettingsConstMeta,
      argValues: [instanceDir, indexName],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiGetSettingsConstMeta => const TaskConstMeta(
        debugName: "get_settings",
        argNames: ["instanceDir", "indexName"],
      );

  @override
  Future<BigInt> crateApiNumberOfDocuments(
      {required String instanceDir, required String indexName}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_String(instanceDir);
        var arg1 = cst_encode_String(indexName);
        return wire.wire__crate__api__number_of_documents(port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_u_64,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiNumberOfDocumentsConstMeta,
      argValues: [instanceDir, indexName],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiNumberOfDocumentsConstMeta => const TaskConstMeta(
        debugName: "number_of_documents",
        argNames: ["instanceDir", "indexName"],
      );

  @override
  Future<List<String>> crateApiSearchDocuments(
      {required String instanceDir,
      required String indexName,
      String? query,
      int? limit,
      int? offset,
      List<SortBy>? sortCriteria,
      Filter? filter,
      TermsMatchingStrategy? matchingStrategy}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_String(instanceDir);
        var arg1 = cst_encode_String(indexName);
        var arg2 = cst_encode_opt_String(query);
        var arg3 = cst_encode_opt_box_autoadd_u_32(limit);
        var arg4 = cst_encode_opt_box_autoadd_u_32(offset);
        var arg5 = cst_encode_opt_list_sort_by(sortCriteria);
        var arg6 = cst_encode_opt_box_autoadd_filter(filter);
        var arg7 = cst_encode_opt_box_autoadd_terms_matching_strategy(
            matchingStrategy);
        return wire.wire__crate__api__search_documents(
            port_, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_list_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiSearchDocumentsConstMeta,
      argValues: [
        instanceDir,
        indexName,
        query,
        limit,
        offset,
        sortCriteria,
        filter,
        matchingStrategy
      ],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSearchDocumentsConstMeta => const TaskConstMeta(
        debugName: "search_documents",
        argNames: [
          "instanceDir",
          "indexName",
          "query",
          "limit",
          "offset",
          "sortCriteria",
          "filter",
          "matchingStrategy"
        ],
      );

  @override
  Future<void> crateApiSetDocuments(
      {required String instanceDir,
      required String indexName,
      required List<String> documents}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_String(instanceDir);
        var arg1 = cst_encode_String(indexName);
        var arg2 = cst_encode_list_String(documents);
        return wire.wire__crate__api__set_documents(port_, arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiSetDocumentsConstMeta,
      argValues: [instanceDir, indexName, documents],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSetDocumentsConstMeta => const TaskConstMeta(
        debugName: "set_documents",
        argNames: ["instanceDir", "indexName", "documents"],
      );

  @override
  Future<void> crateApiSetSettings(
      {required String instanceDir,
      required String indexName,
      required MimirIndexSettings settings}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_String(instanceDir);
        var arg1 = cst_encode_String(indexName);
        var arg2 = cst_encode_box_autoadd_mimir_index_settings(settings);
        return wire.wire__crate__api__set_settings(port_, arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiSetSettingsConstMeta,
      argValues: [instanceDir, indexName, settings],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSetSettingsConstMeta => const TaskConstMeta(
        debugName: "set_settings",
        argNames: ["instanceDir", "indexName", "settings"],
      );

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  Filter dco_decode_box_autoadd_filter(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_filter(raw);
  }

  @protected
  MimirIndexSettings dco_decode_box_autoadd_mimir_index_settings(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_mimir_index_settings(raw);
  }

  @protected
  TermsMatchingStrategy dco_decode_box_autoadd_terms_matching_strategy(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_terms_matching_strategy(raw);
  }

  @protected
  int dco_decode_box_autoadd_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  Filter dco_decode_box_filter(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_filter(raw);
  }

  @protected
  Filter dco_decode_filter(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return Filter_Or(
          dco_decode_list_filter(raw[1]),
        );
      case 1:
        return Filter_And(
          dco_decode_list_filter(raw[1]),
        );
      case 2:
        return Filter_Not(
          dco_decode_box_filter(raw[1]),
        );
      case 3:
        return Filter_Exists(
          field: dco_decode_String(raw[1]),
        );
      case 4:
        return Filter_InValues(
          field: dco_decode_String(raw[1]),
          values: dco_decode_list_String(raw[2]),
        );
      case 5:
        return Filter_GreaterThan(
          field: dco_decode_String(raw[1]),
          value: dco_decode_String(raw[2]),
        );
      case 6:
        return Filter_GreaterThanOrEqual(
          field: dco_decode_String(raw[1]),
          value: dco_decode_String(raw[2]),
        );
      case 7:
        return Filter_Equal(
          field: dco_decode_String(raw[1]),
          value: dco_decode_String(raw[2]),
        );
      case 8:
        return Filter_NotEqual(
          field: dco_decode_String(raw[1]),
          value: dco_decode_String(raw[2]),
        );
      case 9:
        return Filter_LessThan(
          field: dco_decode_String(raw[1]),
          value: dco_decode_String(raw[2]),
        );
      case 10:
        return Filter_LessThanOrEqual(
          field: dco_decode_String(raw[1]),
          value: dco_decode_String(raw[2]),
        );
      case 11:
        return Filter_Between(
          field: dco_decode_String(raw[1]),
          from: dco_decode_String(raw[2]),
          to: dco_decode_String(raw[3]),
        );
      case 12:
        return Filter_IsNull(
          field: dco_decode_String(raw[1]),
        );
      case 13:
        return Filter_IsEmpty(
          field: dco_decode_String(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  List<Filter> dco_decode_list_filter(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_filter).toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<SortBy> dco_decode_list_sort_by(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_sort_by).toList();
  }

  @protected
  List<Synonyms> dco_decode_list_synonyms(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_synonyms).toList();
  }

  @protected
  MimirIndexSettings dco_decode_mimir_index_settings(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 12)
      throw Exception('unexpected arr length: expect 12 but see ${arr.length}');
    return MimirIndexSettings(
      primaryKey: dco_decode_opt_String(arr[0]),
      searchableFields: dco_decode_opt_list_String(arr[1]),
      filterableFields: dco_decode_list_String(arr[2]),
      sortableFields: dco_decode_list_String(arr[3]),
      rankingRules: dco_decode_list_String(arr[4]),
      stopWords: dco_decode_list_String(arr[5]),
      synonyms: dco_decode_list_synonyms(arr[6]),
      typosEnabled: dco_decode_bool(arr[7]),
      minWordSizeForOneTypo: dco_decode_u_8(arr[8]),
      minWordSizeForTwoTypos: dco_decode_u_8(arr[9]),
      disallowTyposOnWords: dco_decode_list_String(arr[10]),
      disallowTyposOnFields: dco_decode_list_String(arr[11]),
    );
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  Filter? dco_decode_opt_box_autoadd_filter(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_filter(raw);
  }

  @protected
  TermsMatchingStrategy? dco_decode_opt_box_autoadd_terms_matching_strategy(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_terms_matching_strategy(raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_32(raw);
  }

  @protected
  List<String>? dco_decode_opt_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_String(raw);
  }

  @protected
  List<SortBy>? dco_decode_opt_list_sort_by(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_sort_by(raw);
  }

  @protected
  SortBy dco_decode_sort_by(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return SortBy_Asc(
          dco_decode_String(raw[1]),
        );
      case 1:
        return SortBy_Desc(
          dco_decode_String(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  Synonyms dco_decode_synonyms(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Synonyms(
      word: dco_decode_String(arr[0]),
      synonyms: dco_decode_list_String(arr[1]),
    );
  }

  @protected
  TermsMatchingStrategy dco_decode_terms_matching_strategy(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TermsMatchingStrategy.values[raw as int];
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  BigInt dco_decode_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  Filter sse_decode_box_autoadd_filter(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_filter(deserializer));
  }

  @protected
  MimirIndexSettings sse_decode_box_autoadd_mimir_index_settings(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_mimir_index_settings(deserializer));
  }

  @protected
  TermsMatchingStrategy sse_decode_box_autoadd_terms_matching_strategy(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_terms_matching_strategy(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_32(deserializer));
  }

  @protected
  Filter sse_decode_box_filter(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_filter(deserializer));
  }

  @protected
  Filter sse_decode_filter(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_list_filter(deserializer);
        return Filter_Or(var_field0);
      case 1:
        var var_field0 = sse_decode_list_filter(deserializer);
        return Filter_And(var_field0);
      case 2:
        var var_field0 = sse_decode_box_filter(deserializer);
        return Filter_Not(var_field0);
      case 3:
        var var_field = sse_decode_String(deserializer);
        return Filter_Exists(field: var_field);
      case 4:
        var var_field = sse_decode_String(deserializer);
        var var_values = sse_decode_list_String(deserializer);
        return Filter_InValues(field: var_field, values: var_values);
      case 5:
        var var_field = sse_decode_String(deserializer);
        var var_value = sse_decode_String(deserializer);
        return Filter_GreaterThan(field: var_field, value: var_value);
      case 6:
        var var_field = sse_decode_String(deserializer);
        var var_value = sse_decode_String(deserializer);
        return Filter_GreaterThanOrEqual(field: var_field, value: var_value);
      case 7:
        var var_field = sse_decode_String(deserializer);
        var var_value = sse_decode_String(deserializer);
        return Filter_Equal(field: var_field, value: var_value);
      case 8:
        var var_field = sse_decode_String(deserializer);
        var var_value = sse_decode_String(deserializer);
        return Filter_NotEqual(field: var_field, value: var_value);
      case 9:
        var var_field = sse_decode_String(deserializer);
        var var_value = sse_decode_String(deserializer);
        return Filter_LessThan(field: var_field, value: var_value);
      case 10:
        var var_field = sse_decode_String(deserializer);
        var var_value = sse_decode_String(deserializer);
        return Filter_LessThanOrEqual(field: var_field, value: var_value);
      case 11:
        var var_field = sse_decode_String(deserializer);
        var var_from = sse_decode_String(deserializer);
        var var_to = sse_decode_String(deserializer);
        return Filter_Between(field: var_field, from: var_from, to: var_to);
      case 12:
        var var_field = sse_decode_String(deserializer);
        return Filter_IsNull(field: var_field);
      case 13:
        var var_field = sse_decode_String(deserializer);
        return Filter_IsEmpty(field: var_field);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  List<Filter> sse_decode_list_filter(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Filter>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_filter(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<SortBy> sse_decode_list_sort_by(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <SortBy>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_sort_by(deserializer));
    }
    return ans_;
  }

  @protected
  List<Synonyms> sse_decode_list_synonyms(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Synonyms>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_synonyms(deserializer));
    }
    return ans_;
  }

  @protected
  MimirIndexSettings sse_decode_mimir_index_settings(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_primaryKey = sse_decode_opt_String(deserializer);
    var var_searchableFields = sse_decode_opt_list_String(deserializer);
    var var_filterableFields = sse_decode_list_String(deserializer);
    var var_sortableFields = sse_decode_list_String(deserializer);
    var var_rankingRules = sse_decode_list_String(deserializer);
    var var_stopWords = sse_decode_list_String(deserializer);
    var var_synonyms = sse_decode_list_synonyms(deserializer);
    var var_typosEnabled = sse_decode_bool(deserializer);
    var var_minWordSizeForOneTypo = sse_decode_u_8(deserializer);
    var var_minWordSizeForTwoTypos = sse_decode_u_8(deserializer);
    var var_disallowTyposOnWords = sse_decode_list_String(deserializer);
    var var_disallowTyposOnFields = sse_decode_list_String(deserializer);
    return MimirIndexSettings(
        primaryKey: var_primaryKey,
        searchableFields: var_searchableFields,
        filterableFields: var_filterableFields,
        sortableFields: var_sortableFields,
        rankingRules: var_rankingRules,
        stopWords: var_stopWords,
        synonyms: var_synonyms,
        typosEnabled: var_typosEnabled,
        minWordSizeForOneTypo: var_minWordSizeForOneTypo,
        minWordSizeForTwoTypos: var_minWordSizeForTwoTypos,
        disallowTyposOnWords: var_disallowTyposOnWords,
        disallowTyposOnFields: var_disallowTyposOnFields);
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Filter? sse_decode_opt_box_autoadd_filter(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_filter(deserializer));
    } else {
      return null;
    }
  }

  @protected
  TermsMatchingStrategy? sse_decode_opt_box_autoadd_terms_matching_strategy(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_terms_matching_strategy(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_32(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<String>? sse_decode_opt_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<SortBy>? sse_decode_opt_list_sort_by(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_sort_by(deserializer));
    } else {
      return null;
    }
  }

  @protected
  SortBy sse_decode_sort_by(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_String(deserializer);
        return SortBy_Asc(var_field0);
      case 1:
        var var_field0 = sse_decode_String(deserializer);
        return SortBy_Desc(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  Synonyms sse_decode_synonyms(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_word = sse_decode_String(deserializer);
    var var_synonyms = sse_decode_list_String(deserializer);
    return Synonyms(word: var_word, synonyms: var_synonyms);
  }

  @protected
  TermsMatchingStrategy sse_decode_terms_matching_strategy(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return TermsMatchingStrategy.values[inner];
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  bool cst_encode_bool(bool raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  int cst_encode_i_32(int raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  int cst_encode_terms_matching_strategy(TermsMatchingStrategy raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_i_32(raw.index);
  }

  @protected
  int cst_encode_u_32(int raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  int cst_encode_u_8(int raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  void cst_encode_unit(void raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_filter(Filter self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_filter(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_mimir_index_settings(
      MimirIndexSettings self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_mimir_index_settings(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_terms_matching_strategy(
      TermsMatchingStrategy self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_terms_matching_strategy(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self, serializer);
  }

  @protected
  void sse_encode_box_filter(Filter self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_filter(self, serializer);
  }

  @protected
  void sse_encode_filter(Filter self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case Filter_Or(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_list_filter(field0, serializer);
      case Filter_And(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_list_filter(field0, serializer);
      case Filter_Not(field0: final field0):
        sse_encode_i_32(2, serializer);
        sse_encode_box_filter(field0, serializer);
      case Filter_Exists(field: final field):
        sse_encode_i_32(3, serializer);
        sse_encode_String(field, serializer);
      case Filter_InValues(field: final field, values: final values):
        sse_encode_i_32(4, serializer);
        sse_encode_String(field, serializer);
        sse_encode_list_String(values, serializer);
      case Filter_GreaterThan(field: final field, value: final value):
        sse_encode_i_32(5, serializer);
        sse_encode_String(field, serializer);
        sse_encode_String(value, serializer);
      case Filter_GreaterThanOrEqual(field: final field, value: final value):
        sse_encode_i_32(6, serializer);
        sse_encode_String(field, serializer);
        sse_encode_String(value, serializer);
      case Filter_Equal(field: final field, value: final value):
        sse_encode_i_32(7, serializer);
        sse_encode_String(field, serializer);
        sse_encode_String(value, serializer);
      case Filter_NotEqual(field: final field, value: final value):
        sse_encode_i_32(8, serializer);
        sse_encode_String(field, serializer);
        sse_encode_String(value, serializer);
      case Filter_LessThan(field: final field, value: final value):
        sse_encode_i_32(9, serializer);
        sse_encode_String(field, serializer);
        sse_encode_String(value, serializer);
      case Filter_LessThanOrEqual(field: final field, value: final value):
        sse_encode_i_32(10, serializer);
        sse_encode_String(field, serializer);
        sse_encode_String(value, serializer);
      case Filter_Between(field: final field, from: final from, to: final to):
        sse_encode_i_32(11, serializer);
        sse_encode_String(field, serializer);
        sse_encode_String(from, serializer);
        sse_encode_String(to, serializer);
      case Filter_IsNull(field: final field):
        sse_encode_i_32(12, serializer);
        sse_encode_String(field, serializer);
      case Filter_IsEmpty(field: final field):
        sse_encode_i_32(13, serializer);
        sse_encode_String(field, serializer);
    }
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_filter(List<Filter> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_filter(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_sort_by(List<SortBy> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_sort_by(item, serializer);
    }
  }

  @protected
  void sse_encode_list_synonyms(List<Synonyms> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_synonyms(item, serializer);
    }
  }

  @protected
  void sse_encode_mimir_index_settings(
      MimirIndexSettings self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.primaryKey, serializer);
    sse_encode_opt_list_String(self.searchableFields, serializer);
    sse_encode_list_String(self.filterableFields, serializer);
    sse_encode_list_String(self.sortableFields, serializer);
    sse_encode_list_String(self.rankingRules, serializer);
    sse_encode_list_String(self.stopWords, serializer);
    sse_encode_list_synonyms(self.synonyms, serializer);
    sse_encode_bool(self.typosEnabled, serializer);
    sse_encode_u_8(self.minWordSizeForOneTypo, serializer);
    sse_encode_u_8(self.minWordSizeForTwoTypos, serializer);
    sse_encode_list_String(self.disallowTyposOnWords, serializer);
    sse_encode_list_String(self.disallowTyposOnFields, serializer);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_filter(
      Filter? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_filter(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_terms_matching_strategy(
      TermsMatchingStrategy? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_terms_matching_strategy(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_32(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_32(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_String(
      List<String>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_sort_by(
      List<SortBy>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_sort_by(self, serializer);
    }
  }

  @protected
  void sse_encode_sort_by(SortBy self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case SortBy_Asc(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field0, serializer);
      case SortBy_Desc(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_String(field0, serializer);
    }
  }

  @protected
  void sse_encode_synonyms(Synonyms self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.word, serializer);
    sse_encode_list_String(self.synonyms, serializer);
  }

  @protected
  void sse_encode_terms_matching_strategy(
      TermsMatchingStrategy self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }
}
