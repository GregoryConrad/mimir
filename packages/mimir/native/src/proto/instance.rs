// @generated
// This file is @generated by prost-build.
/// The settings of a mimir index
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MimirIndexSettings {
    #[prost(string, optional, tag="1")]
    pub primary_key: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag="2")]
    pub searchable_fields: ::core::option::Option<mimir_index_settings::SearchableFields>,
    #[prost(string, repeated, tag="3")]
    pub filterable_fields: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag="4")]
    pub sortable_fields: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag="5")]
    pub ranking_rules: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag="6")]
    pub stop_words: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(message, repeated, tag="7")]
    pub synonyms: ::prost::alloc::vec::Vec<mimir_index_settings::Synonyms>,
    #[prost(bool, tag="8")]
    pub typos_enabled: bool,
    #[prost(uint32, tag="9")]
    pub min_word_size_for_one_typo: u32,
    #[prost(uint32, tag="10")]
    pub min_word_size_for_two_typos: u32,
    #[prost(string, repeated, tag="11")]
    pub disallow_typos_on_words: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag="12")]
    pub disallow_typos_on_fields: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// Nested message and enum types in `MimirIndexSettings`.
pub mod mimir_index_settings {
    /// Represents the searchable fields
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
    pub struct SearchableFields {
        #[prost(string, repeated, tag="1")]
        pub searchable_fields: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    }
    /// Represents the synonyms of a given word
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Synonyms {
        #[prost(string, tag="1")]
        pub word: ::prost::alloc::string::String,
        #[prost(string, repeated, tag="2")]
        pub synonyms: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    }
}
/// The filters to be used in a search/query
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Filter {
    #[prost(oneof="filter::Kind", tags="1, 2, 3, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20")]
    pub kind: ::core::option::Option<filter::Kind>,
}
/// Nested message and enum types in `Filter`.
pub mod filter {
    /// For Or/And, when we need repeated sub-filters
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Filters {
        #[prost(message, repeated, tag="1")]
        pub filters: ::prost::alloc::vec::Vec<super::Filter>,
    }
    /// For field-only cases (IsNull, IsEmpty, Exists)
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Field {
        #[prost(string, tag="1")]
        pub field: ::prost::alloc::string::String,
    }
    /// For IN operator
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
    pub struct InValues {
        #[prost(string, tag="1")]
        pub field: ::prost::alloc::string::String,
        #[prost(string, repeated, tag="2")]
        pub values: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    }
    /// For comparisons like >, >=, ==, etc.
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Comparison {
        #[prost(string, tag="1")]
        pub field: ::prost::alloc::string::String,
        #[prost(string, tag="2")]
        pub value: ::prost::alloc::string::String,
    }
    /// For BETWEEN operator
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Between {
        #[prost(string, tag="1")]
        pub field: ::prost::alloc::string::String,
        #[prost(string, tag="2")]
        pub from: ::prost::alloc::string::String,
        #[prost(string, tag="3")]
        pub to: ::prost::alloc::string::String,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Kind {
        /// Creates an "or" \[Filter\] of the given sub-filters.
        #[prost(message, tag="1")]
        Or(Filters),
        /// Creates an "and" \[Filter\] of the given sub-filters.
        #[prost(message, tag="2")]
        And(Filters),
        /// Creates a "not" \[Filter\] of the given sub-filter.
        #[prost(message, tag="3")]
        Not(::prost::alloc::boxed::Box<super::Filter>),
        /// Creates a \[Filter\] that specifies the given field exists.
        #[prost(message, tag="10")]
        Exists(Field),
        /// Creates a \[Filter\] for the "IN" operator.
        #[prost(message, tag="11")]
        InValues(InValues),
        /// Creates a \[Filter\] for the ">" operator.
        #[prost(message, tag="12")]
        GreaterThan(Comparison),
        /// Creates a \[Filter\] for the ">=" operator.
        #[prost(message, tag="13")]
        GreaterThanOrEqual(Comparison),
        /// Creates a \[Filter\] for the "==" operator.
        #[prost(message, tag="14")]
        Equal(Comparison),
        /// Creates a \[Filter\] for the "!=" operator.
        #[prost(message, tag="15")]
        NotEqual(Comparison),
        /// Creates a \[Filter\] for the "<" operator.
        #[prost(message, tag="16")]
        LessThan(Comparison),
        /// Creates a \[Filter\] for the "<=" operator.
        #[prost(message, tag="17")]
        LessThanOrEqual(Comparison),
        /// Creates a \[Filter\] for the "BETWEEN" operator.
        #[prost(message, tag="18")]
        Between(Between),
        /// Creates a \[Filter\] for the "IS NULL" operator.
        #[prost(message, tag="19")]
        IsNull(Field),
        /// Creates a \[Filter\] for the "IS EMPTY" operator.
        #[prost(message, tag="20")]
        IsEmpty(Field),
    }
}
/// A request that operates on an instance.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InstanceFfiRequest {
    #[prost(string, tag="1")]
    pub instance_dir: ::prost::alloc::string::String,
    #[prost(oneof="instance_ffi_request::Kind", tags="2, 3")]
    pub kind: ::core::option::Option<instance_ffi_request::Kind>,
}
/// Nested message and enum types in `InstanceFfiRequest`.
pub mod instance_ffi_request {
    /// Ensures an instance of milli (represented by just a directory) is initialized
    ///
    /// `tmp_dir`, if specified, is the directory used to store all temporary files
    /// (see <https://github.com/GregoryConrad/mimir/issues/170>)
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
    pub struct EnsureInitialized {
        #[prost(string, optional, tag="1")]
        pub tmp_dir: ::core::option::Option<::prost::alloc::string::String>,
    }
    /// A request that operates on an index.
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
    pub struct IndexRequest {
        #[prost(string, tag="1")]
        pub index_name: ::prost::alloc::string::String,
        #[prost(oneof="index_request::Kind", tags="2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12")]
        pub kind: ::core::option::Option<index_request::Kind>,
    }
    /// Nested message and enum types in `IndexRequest`.
    pub mod index_request {
        /// Ensures a milli index is initialized
        #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
        pub struct EnsureInitialized {
        }
        /// Adds the given list of documents to the specified milli index
        ///
        /// Replaces documents that already exist in the index based on document ids
        #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
        pub struct AddDocuments {
            #[prost(string, repeated, tag="1")]
            pub documents: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
        }
        /// Deletes the documents with the given ids from the milli index
        #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
        pub struct DeleteDocuments {
            #[prost(string, repeated, tag="1")]
            pub document_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
        }
        /// Deletes all the documents from the milli index
        #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
        pub struct DeleteAllDocuments {
        }
        /// Replaces all documents with the given documents
        #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
        pub struct SetDocuments {
            #[prost(string, repeated, tag="1")]
            pub documents: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
        }
        /// Returns the document with the specified id from the index, if one exists
        #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
        pub struct GetDocument {
            #[prost(string, tag="1")]
            pub document_id: ::prost::alloc::string::String,
        }
        /// Returns all documents stored in the index
        #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
        pub struct GetAllDocuments {
        }
        /// Performs a search against the index and returns the documents found
        #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
        pub struct SearchDocuments {
            #[prost(string, optional, tag="1")]
            pub query: ::core::option::Option<::prost::alloc::string::String>,
            #[prost(uint32, optional, tag="2")]
            pub limit: ::core::option::Option<u32>,
            #[prost(uint32, optional, tag="3")]
            pub offset: ::core::option::Option<u32>,
            #[prost(message, optional, tag="4")]
            pub filter: ::core::option::Option<super::super::Filter>,
            #[prost(enumeration="search_documents::TermsMatchingStrategy", optional, tag="5")]
            pub terms_matching_strategy: ::core::option::Option<i32>,
            #[prost(message, optional, tag="6")]
            pub sort_criteria: ::core::option::Option<search_documents::SortCriteria>,
        }
        /// Nested message and enum types in `SearchDocuments`.
        pub mod search_documents {
            #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
            pub struct SortCriteria {
                #[prost(message, repeated, tag="1")]
                pub sort_criteria: ::prost::alloc::vec::Vec<SortBy>,
            }
            /// Whether to sort by a field in ascending or descending order.
            /// See <https://docs.meilisearch.com/reference/api/search.html#sort>
            #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
            pub struct SortBy {
                #[prost(oneof="sort_by::Kind", tags="1, 2")]
                pub kind: ::core::option::Option<sort_by::Kind>,
            }
            /// Nested message and enum types in `SortBy`.
            pub mod sort_by {
                #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
                pub enum Kind {
                    /// Sort by the given field in ascending order
                    #[prost(string, tag="1")]
                    Asc(::prost::alloc::string::String),
                    /// Sort by the given field in descending order
                    #[prost(string, tag="2")]
                    Desc(::prost::alloc::string::String),
                }
            }
            /// See <https://docs.meilisearch.com/reference/api/search.html#matching-strategy>
            #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
            #[repr(i32)]
            pub enum TermsMatchingStrategy {
                /// Remove last word first
                /// buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
                Last = 0,
                /// All words are mandatory
                All = 1,
            }
            impl TermsMatchingStrategy {
                /// String value of the enum field names used in the ProtoBuf definition.
                ///
                /// The values are not transformed in any way and thus are considered stable
                /// (if the ProtoBuf definition does not change) and safe for programmatic use.
                pub fn as_str_name(&self) -> &'static str {
                    match self {
                        TermsMatchingStrategy::Last => "TERMS_MATCHING_STRATEGY_LAST",
                        TermsMatchingStrategy::All => "TERMS_MATCHING_STRATEGY_ALL",
                    }
                }
                /// Creates an enum from field names used in the ProtoBuf definition.
                pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
                    match value {
                        "TERMS_MATCHING_STRATEGY_LAST" => Some(Self::Last),
                        "TERMS_MATCHING_STRATEGY_ALL" => Some(Self::All),
                        _ => None,
                    }
                }
            }
        }
        /// Returns the number of documents stored in the index
        #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
        pub struct NumberOfDocuments {
        }
        /// Gets the settings of the specified index
        #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
        pub struct GetSettings {
        }
        /// Sets the settings of the specified index
        #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
        pub struct SetSettings {
            #[prost(message, optional, tag="1")]
            pub settings: ::core::option::Option<super::super::MimirIndexSettings>,
        }
        #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum Kind {
            #[prost(message, tag="2")]
            EnsureIndexInitialized(EnsureInitialized),
            #[prost(message, tag="3")]
            AddDocuments(AddDocuments),
            #[prost(message, tag="4")]
            DeleteDocuments(DeleteDocuments),
            #[prost(message, tag="5")]
            DeleteAllDocuments(DeleteAllDocuments),
            #[prost(message, tag="6")]
            SetDocuments(SetDocuments),
            #[prost(message, tag="7")]
            GetDocument(GetDocument),
            #[prost(message, tag="8")]
            GetAllDocuments(GetAllDocuments),
            #[prost(message, tag="9")]
            SearchDocuments(SearchDocuments),
            #[prost(message, tag="10")]
            NumberOfDocuments(NumberOfDocuments),
            #[prost(message, tag="11")]
            GetSettings(GetSettings),
            #[prost(message, tag="12")]
            SetSettings(SetSettings),
        }
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Kind {
        #[prost(message, tag="2")]
        EnsureInstanceInitialized(EnsureInitialized),
        #[prost(message, tag="3")]
        IndexRequest(IndexRequest),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InstanceFfiResponse {
    #[prost(string, optional, tag="1")]
    pub error: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(oneof="instance_ffi_response::Kind", tags="2, 3, 4, 5")]
    pub kind: ::core::option::Option<instance_ffi_response::Kind>,
}
/// Nested message and enum types in `InstanceFfiResponse`.
pub mod instance_ffi_response {
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
    pub struct OptionalDocument {
        #[prost(string, optional, tag="1")]
        pub document: ::core::option::Option<::prost::alloc::string::String>,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Documents {
        #[prost(string, repeated, tag="1")]
        pub documents: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Kind {
        #[prost(message, tag="2")]
        Document(OptionalDocument),
        #[prost(message, tag="3")]
        Documents(Documents),
        #[prost(uint64, tag="4")]
        NumberOfDocuments(u64),
        #[prost(message, tag="5")]
        IndexSettings(super::MimirIndexSettings),
    }
}
// @@protoc_insertion_point(module)
